// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

model Balance {
    id       String @id @default(cuid())
    current  Int
    income   Int
    expenses Int

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id     String   @id @default(cuid())
    avatar String
    name   String
    date   DateTime
    amount Int

    categoryId      String
    category        Category       @relation(fields: [categoryId], references: [id])
    recurringBillId String?
    recurringBill   RecurringBill? @relation(fields: [recurringBillId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RecurringBill {
    id     String @id @default(cuid())
    avatar String
    // We use `@unique` for `name` to generate recurring bills from transactions
    // Ideally, we'd separate these collections in `data.json`
    name   String @unique
    amount Int
    day    Int

    transaction Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Budget {
    id      String @id @default(cuid())
    maximum Int

    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    themeId    String
    theme      Theme    @relation(fields: [themeId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([themeId, userId])
    @@unique([categoryId, userId])
}

model Pot {
    id     String @id @default(cuid())
    name   String
    target Int
    total  Int

    themeId String
    theme   Theme  @relation(fields: [themeId], references: [id])
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([themeId, userId])
}

model Category {
    id   String @id @default(cuid())
    name String @unique
    // todo: order Int

    Transaction Transaction[]
    Budget      Budget[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Theme {
    id    String @id @default(cuid())
    name  String @unique
    color String
    // todo: order Int

    Budget Budget[]
    Pot    Pot[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id    String  @id @default(cuid())
    email String  @unique
    name  String
    demo  Boolean

    password Password?
    balance  Balance?
    budgets  Budget[]
    pots     Pot[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Password {
    id   String @id @default(cuid())
    hash String

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
